[gcode_macro G29]
gcode:
 BED_MESH_CALIBRATE
 G1 X151 Y115 Z5 F15000

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
   {% set my_current = params.CURRENT|default(0.12)|float %} ; adjust crash current as required without fighting config.
    {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %} ; TODO: Find runtime current settings
    {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %} 
    {% set x_max = printer.toolhead.axis_maximum.x %} 
    {% set y_max = printer.toolhead.axis_maximum.y %} 
    {% set z_max = printer.toolhead.axis_maximum.z %} 
    
    G28 ; todo query for homed
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F8000 ; TODO grab feedrate from config
    G0 Z{z_max} F720 ; go to the Z-max at speed 12*60
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
    G4 P200 ; Probably not necessary, it is here just for sure
    FORCE_MOVE STEPPER=stepper_z DISTANCE=10 VELOCITY=6
    G4 P200 ; 
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-4 VELOCITY=6
    G4 P200 ; same as the first one
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
    G4 P200 ; same as the first one
    G28 Z

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION

[menu __main __setup __calib __mech_gantry_calibrate]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G34 Gantry Level
gcode:
    G34

[gcode_macro TURN_OFF_MOTORS]
gcode:
    # Disable steppers
    M84
    
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}

    G90 ; Use absolute coordinates
    M83 ; Set Extruder to relative mode
    M140 S{BED_TEMP} ; Start bed heating (but don't wait for it)
    M104 S190 ; Start with nozzle at lower temperature
    G4 S10 ; allow partial nozzle warmup
    SET_GCODE_OFFSET Z=-3.570 ; Reset the Gcode Z offset (change if necessary)
    G28 ; Home the printer
    BED_MESH_PROFILE LOAD="default" ; Load bed mesh
    M190 S{BED_TEMP} ; Wait for bed to reach temperature
    M109 S{EXTRUDER_TEMP} ; Wait for extruder to reach temperature

    # Prime the nozzle
    G1 X2 Y10 F3000
    G1 Z0.28 F240    G92 E0
    G1 Y140 E10 F1500 ; prime the nozzle
    G1 X2.3 F5000
    G92 E0
    G1 Y10 E10 F1200 ; prime the nozzle
    G92 E0

[gcode_macro END_PRINT]
gcode:
    TURN_OFF_HEATERS
    M106 S0 ; Turn off part cooling fan
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 100mm
    G1 Z100 F3000
    G90
    TURN_OFF_MOTORS

[idle_timeout]
timeout = 300
gcode:
	{% if printer.pause_resume.is_paused %}
	  M117 "timeout ignored because printer state == paused."
	{% else %}
	  {% if (printer.toolhead.homed_axes == 'xyz' and printer.toolhead.axis_maximum.z > (printer.toolhead.position.z + 20)) %}
		G91
		G0 Z10 F600
		G90
		G0 X150 Y150 F2400
	  {% endif %}
	  TURN_OFF_MOTORS
	  TURN_OFF_HEATERS
	  UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=60
	{% endif %}
	
[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="ender3_plug",
                             state="off")}

[delayed_gcode DELAYED_PRINTER_OFF]
initial_duration = 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    {% if printer["extruder"].temperature > 50 %}
      UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=60
    {% else %}
      POWER_OFF_PRINTER
    {% endif %}
  {% else %}
    M118 Printer not idle, cancelled PRINTER_OFF.
  {% endif %}
